datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  avatar           String
  peru             String
  username         String             @unique
  bio              String
  type             String
  skills           String[]
  areasofinterest  String[]
  availableFor     String
  location         String
  linkedin         String?
  github           String?
  
  startups         Startup[]
  investments      Investment[]
  jobApplications  JobApplication[]
  connections      Connection[]
  collaborations   Collaboration[]
  experiences      UserExperience[]
}

model Startup {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  problem     String
  solution    String
  industry    String
  location    String
  teamSize    Int
  patent      String
  funding     Int
  
  founderId   Int
  founder     User    @relation(fields: [founderId], references: [id])
  
  jobs        Job[]
  investments Investment[]
  collaborations Collaboration[]
}

model Investment {
  id        Int     @id @default(autoincrement())
  userId    Int
  startupId Int
  amount    Float
  
  user      User    @relation(fields: [userId], references: [id])
  startup   Startup @relation(fields: [startupId], references: [id])
}

model Job {
  id            Int     @id @default(autoincrement())
  title         String
  description   String
  requirements  String
  skills        String[]
  experience    String
  equity        Float
  type          String
  
  startupId     Int
  startup       Startup @relation(fields: [startupId], references: [id])
  
  applications  JobApplication[]
}

model JobApplication {
  id        Int      @id @default(autoincrement())
  userId    Int
  jobId     Int
  status    String   @default("pending")
  
  user      User     @relation(fields: [userId], references: [id])
  job       Job      @relation(fields: [jobId], references: [id])
}

model Connection {
  id          Int     @id @default(autoincrement())
  senderId    Int
  receiverId  Int
  status      String  @default("pending")
  
  sender      User    @relation(fields: [senderId], references: [id])
  
}

model JobRole {
  id    Int    @id @default(autoincrement())
  name  String
  
  collaborations Collaboration[]
}

model Collaboration {
  id        Int     @id @default(autoincrement())
  userId    Int
  startupId Int
  roleId    Int
  
  user      User    @relation(fields: [userId], references: [id])
  startup   Startup @relation(fields: [startupId], references: [id])
  role      JobRole @relation(fields: [roleId], references: [id])
}

model UserExperience {
  id          Int       @id @default(autoincrement())
  userId      Int
  company     String
  role        String
  startDate   DateTime
  endDate     DateTime?
  description String?
  
  user        User      @relation(fields: [userId], references: [id])
}